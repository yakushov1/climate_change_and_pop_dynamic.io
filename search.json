[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Исходный код расчетов",
    "section": "",
    "text": "Приведен исходный код расчетов для диссертации на соискание ученой степени кандидата биологических наук.\nТема диссертации “Динамика популяций мелких млекопитающих средней Енисейской тайги в связи с потеплением климата”.\nАвтор: Якушов Василий Дмитриевич\nИнститут проблем экологии и эволюции им. А.Н. Северцова Российской Академии Наук.\nИсходный код опубликован в формате Markdown. Исходные данные во избежание плагиата не приводятся. Разрешается использование фрагментов кода в некоммерческих целях с обязательным указанием авторства."
  },
  {
    "objectID": "1_import-&-cleaning.html",
    "href": "1_import-&-cleaning.html",
    "title": "Импорт и очистка климатических данных",
    "section": "",
    "text": "Импорт и очистка данных\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(VIM)\nlibrary(imputeTS)\nlibrary(WaveletComp)",
    "crumbs": [
      "Климатические изменения",
      "Импорт и очистка климатических данных"
    ]
  },
  {
    "objectID": "population_dynamic_main.html",
    "href": "population_dynamic_main.html",
    "title": "Динамика популяций",
    "section": "",
    "text": "Анализ временных рядов с помощью вейвлет-преобразования.",
    "crumbs": [
      "Динамика популяций"
    ]
  },
  {
    "objectID": "climate_main.html",
    "href": "climate_main.html",
    "title": "Климатические изменения района исследований",
    "section": "",
    "text": "Использованные библиотеки\nВсе вычисления были выполнены с помощью языка статистической обработки данных R в среде Rstudio. Были использованы как самостоятельно написанные функции, так и готовые решения, такие как:\n\n1library(tidyverse)\n2library(readxl)\n3library(plotly)\n4library(VIM)\n5library(imputeTS)\n6library(WaveletComp)\n\n\n1\n\nЭкосистема пакетов tidyverse, включающая в себя пакеты dplyr для “аккуратных” вычислений, ggplot2 для построения графиков и другие https://www.tidyverse.org/\n\n2\n\nИспользовался для импорта файлов Excel\n\n3\n\nПакет для создания интерактивных визуализаций\n\n4\n\nИспользовался для визуализации количества пропущенных значений\n\n5\n\nИспользовался для заполнения пропущенных значений линейной интерполяцией\n\n6\n\nВейвлет-преобразование временных рядов",
    "crumbs": [
      "Климатические изменения",
      "Климатические изменения района исследований"
    ]
  },
  {
    "objectID": "6_graphs.html",
    "href": "6_graphs.html",
    "title": "Графики (исходный код)",
    "section": "",
    "text": "Графики для размещения в тексте диссертации",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "4_Tavg_Sn_Pr_anomaly.html",
    "href": "4_Tavg_Sn_Pr_anomaly.html",
    "title": "Расчет аномалий метеопараметров",
    "section": "",
    "text": "Аномалии рассчитаны как отклонения от среднего за базовый (1961-1990) периоды",
    "crumbs": [
      "Климатические изменения",
      "Расчет аномалий метеопараметров"
    ]
  },
  {
    "objectID": "2_all_station_Tavg&Sn_quality.html",
    "href": "2_all_station_Tavg&Sn_quality.html",
    "title": "Расчет среднемесячных показателей",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(VIM) #для визуализации пропусков\nlibrary(rvest) #для копирования таблицы из веба\n\nФункции для считывания исходных файлов в каталоге, осреднения и приведения их к необходимой форме\n\n# Functions ---------------------------------------------------------------\nreading_XXI &lt;- function(name_of_df){\n  result &lt;- read_excel(name_of_df) |&gt; \n    select(1,2,28) |&gt; \n    rename(Local_time = 1) |&gt; \n    mutate(Local_time = as_datetime(Local_time, format=\"%d.%m.%Y %R\")) |&gt; \n    mutate(Year = year(Local_time),\n           Month = month(Local_time),\n           Day = mday(Local_time)) |&gt; \n    rename(Sn = \"E'\",\n           Tavg = \"T\") |&gt;\n    group_by(Year, Month, Day) |&gt; \n    summarise(Sn = as.factor(str_flatten(Sn, \", \", na.rm = T)),\n              Tavg = mean(Tavg, na.rm=T)) |&gt; \n    arrange(Year, Month, Day) |&gt; \n    mutate(Station = str_match(name_of_df, \"station/(.*?).xls\")[2])\n  return(result)\n}\nreading_XX &lt;- function(x){read_table2(x, col_names = F)}\nparsing_html_table &lt;- function(http){\n  df &lt;- read_html(http)\n  year &lt;- df |&gt; \n    html_element(\".chronicle-table-left-column\") |&gt; \n    html_table() |&gt; \n    slice(-1)\n  temper &lt;- df |&gt; \n    html_element(\".chronicle-table\") |&gt; \n    html_table() |&gt; \n    slice(-1)\n  \n  result &lt;- cbind(year, temper)\n  colnames(result) &lt;- c(\"Year\", c(1:12), \"annualy\")\n  result &lt;- result |&gt; \n    select(-annualy) |&gt; \n    pivot_longer(-Year, values_to = \"Tavg\", names_to = \"Month\") |&gt; \n    filter(Year %in% c(1961:2004) | (Year == 2005 & Month==1)) |&gt; \n    mutate_at(c(1:3), .funs=as.numeric)\n  return(result)\n}\n\nСчитывание необходимых файлов\n\n\n# Данные 2005-2023 (6 станций(без бахты)) суточное разрешение ----------------------------------------------\npaths &lt;- list.files(\"../initial_data/climate/2005_2023_seven_station\", pattern = \"[.]xls$\", full.names = TRUE)\n\nsix_station_2005_2023 &lt;- paths |&gt;\n  map_dfr(reading_XXI)\nrm(reading_XXI, paths)\naggr(six_station_2005_2023, prop = F, numbers = T) #отлично, пропусков нет\n\n# температура 2005-2023 (аггрегация до месячного разрешения) 6 станций ------------------------------\nsix_station_2005_2023_monthly &lt;- six_station_2005_2023 |&gt; \n  group_by(Station, Year, Month) |&gt; \n  summarise(Tavg = mean(Tavg))\n\n# температура Обнинск (месячное разрешение) 4 станции ---------------------\npaths &lt;- list.files(\"../initial_data/climate/monthly_all_station/\", pattern = \"[.]txt$\", full.names = TRUE) # Просканировали все файлы в директории\nfour_station_obninsk &lt;- paths |&gt;\n  map(reading_XX) |&gt;\n  list_rbind() |&gt; \n  rename(Station = X1) |&gt; \n  mutate(Station = case_when(\n    Station == \"23274\" ~\"igarka\",\n    Station == \"23678\" ~ \"verkhneimbatsk\",\n    Station == \"23472\" ~ \"turukhansk\",\n    .default = \"bor\"))\ncolnames(four_station_obninsk) &lt;- c(\"Station\", \"Year\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"10\", \"11\", \"12\")\n\nrm(paths)\n\nfour_station_obninsk &lt;- four_station_obninsk |&gt; \n  pivot_longer(-c(Station, Year), names_to = \"Month\", values_to = \"Tavg\") |&gt; \n  mutate(Month = as.numeric(Month)) |&gt; \n  filter(Year %in% c(1961:2004) | (Year == 2005 & Month==1))\n\n# Ворогово и ярцево (из интернета) ----------------------------------------\nvorogovo &lt;- parsing_html_table(\"http://www.pogodaiklimat.ru/history/23973.htm\") |&gt;\n  mutate(Station = \"vorogovo\")\nyartsevo &lt;- parsing_html_table(\"http://www.pogodaiklimat.ru/history/23987.htm\") |&gt; \n  mutate(Station = \"yartsevo\")\n\nsix_station &lt;- rbind(six_station_2005_2023_monthly, four_station_obninsk, vorogovo, yartsevo) |&gt; \n  arrange(Station, Year, Month) |&gt; \n  filter(Year %in% c(1961:2022) | (Year %in% c(1961:2023) & Month &lt;7))\n\nbakhta_monthly &lt;- read_csv2(\"../initial_data/climate/cleaned/Bakhta_monthly_1966-1976_replaced_by_average_Bor_Verkhn.csv\") |&gt; \n  mutate(Station = \"bakhta\") |&gt; \n  select(Station, Year, Month, Tavg)\n  \nall_station &lt;- rbind(six_station, bakhta_monthly) |&gt; \n  arrange(Station, Year, Month)\n\naverage_temp_by_7_station &lt;- all_station |&gt; \n  group_by(Year, Month) |&gt; \n  summarise(Tavg = mean(Tavg))\n\nsnow_quality_six_station &lt;- six_station_2005_2023 |&gt; \n  select(-Tavg) |&gt; \n  rename(Sn_description = Sn)\n\nСохранение обработанных файлов\n\n#write.csv2(all_station, \"initial_data/climate/cleaned/all_station_tavg_monthly.csv\", row.names = F)\n#write.csv2(average_temp_by_7_station, \"initial_data/climate/cleaned/average_temp_by_7_station.csv\", row.names = F)\n#write.csv2(snow_quality_six_station, \"initial_data/climate/cleaned/snow_quality_six_station.csv\", row.names = F)",
    "crumbs": [
      "Климатические изменения",
      "Расчет среднемесячных показателей"
    ]
  },
  {
    "objectID": "3_bad_snow.html",
    "href": "3_bad_snow.html",
    "title": "Неблагоприятные снежные условия",
    "section": "",
    "text": "Показать код\n# Functions ---------------------------------------------------------------\nread_files  &lt;- function(x){\n  read_excel(x) |&gt; \n    select(Local_time, Tavg = T, Sn_description = `E'`) |&gt; \n    mutate(Local_time = as_datetime(Local_time, format = \"%d.%m.%Y %R\")) |&gt; \n    mutate(Year = year(Local_time),\n           Month = as.factor(month(Local_time)),\n           Day = mday(Local_time)) |&gt; \n    group_by(Year, Month,  Day) |&gt; \n    summarise(Sn_description = as.factor(str_flatten(Sn_description, \", \", na.rm = T)),\n              cross_zero = case_when(min(Tavg)&lt;0 & max(Tavg)&lt;0 ~\"cold\",\n                                     min(Tavg)&lt;0 & max(Tavg)&gt;0 ~ \"cross\",\n                                     min(Tavg)&gt;0 & max(Tavg)&gt;0 ~ \"warm\"))\n}\n\nmeans_smooth &lt;- function(x, n) {\n  pracma::movavg(x, n=10, type=c(\"s\"))\n}\n\n\n\n\n\n\n\nПоказать код\n# Импорт данных 1961-2004 -------------------------------------------------\nsnow_1961_2004 &lt;- read.csv2(\"../initial_data/climate/1961_2005/23776_snow.csv\", fileEncoding = \"windows-1251\") |&gt;\n  select(\n    Station = Станция,\n    Year = Год,\n    Month = Месяц,\n    Day = День,\n    Sn = Высота_снежного_покрова,\n    Sn_description = Снежный_покров_.степень_покрытия,\n    Q1,\n    Q2,\n    Q3\n  )|&gt; \n  filter(Q1 == 0) |&gt; # по описанию данных 0 - данные о снежном покрове верные\n  filter(Sn_description != 99) |&gt;\n  filter((Year&lt;2005) | (Year == 2005 & Month == 1)) |&gt; \n  mutate(Sn_description = ifelse(Sn_description &lt;= 5,1,0)) # Если снег &lt;50% поверхности почвы, то 1\n\n\nsnow_1961_2004_may &lt;- snow_1961_2004 |&gt; \n  filter(Month == 5)\n\n\ntavg_1961_2004_may &lt;- read_excel(\"../initial_data/climate/1961_2005/23776_TTTR.xlsx\") |&gt; \n  select(Year = год,\n         Month = месяц,\n         Day = день,\n         Tmin = Тмин,\n         Tavg = Тср,\n         Tmax = Тмакс) |&gt; \n  filter(Month == 5,\n         Year != 2005)\n\n\ncross_zero_snow_may_1961_2004 &lt;- tavg_1961_2004_may |&gt; \n  left_join(snow_1961_2004_may, by = c(\"Year\", \"Month\", \"Day\")) |&gt;  \n  mutate(cross_zero = case_when(Tmin&lt;0 & Tmax&gt;0 ~ \"cross\",\n                                Tmin&lt;0 & Tmax&lt;0 ~ \"cold\",\n                                Tmin &gt; 0 & Tmax &gt; 0 ~ \"warm\"\n  )) |&gt; \n  select(Year, Sn_description, cross_zero)\n\n\n\n# Импорт данных 2005-2023 -------------------------------------------------\n\npaths &lt;- list.files(\"../initial_data/climate/2005_2023\", pattern = \"[.]xls$\", full.names = TRUE) # Просканировали все файлы в директории\n\ntotal_2005_2023 &lt;- paths |&gt; \n  map_df(read_files)\n\ns &lt;- levels(as.factor(total_2005_2023$Sn_description))[c(4, 5,6)] # Отбор уровней фактора, когда снег = лед, или снег не покрывает всю поверхность почвы\n\n\ntotal_2005_2023 &lt;- total_2005_2023 |&gt; \n  mutate(Sn_description = ifelse(Sn_description %in% s,1,0))\n\ncross_zero_snow_may_2005_2023 &lt;- total_2005_2023 |&gt; \n  ungroup() |&gt; \n  filter(Month == 5) |&gt; \n  select(-Month, -Day)\n\n\n\n\n# Объединение данных из разных источников ---------------------------------\nsnow_1961_2023 &lt;- snow_1961_2004 |&gt; \n  select(Year, Month, Sn_description) |&gt; \n  rbind(total_2005_2023 |&gt; \n          select(Year, Month, Sn_description))",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "5_crossing_zero.html",
    "href": "5_crossing_zero.html",
    "title": "Сезоны по переходу температур через 0",
    "section": "",
    "text": "Даты начала, окончания “сезонов”, их продолжительность по годам и месяцам.",
    "crumbs": [
      "Климатические изменения",
      "Сезоны по переходу температур через 0"
    ]
  },
  {
    "objectID": "7_tables.html",
    "href": "7_tables.html",
    "title": "Таблицы для диссертации",
    "section": "",
    "text": "Таблицы для вставки в текст диссертации\nlibrary(tidyverse)\nlibrary(writexl)\n# Стандартная ошибка - стандартное отклонение/квадратный корень из числа наблюдений\nstd &lt;- function(x){ sd(x)/sqrt(length(x)) } \n\n\n# Таблица для вставки в диссертацию ---------------------------------------\n# работает только после запуска всех скриптов в директории, то есть последней\nmonthly_anomaly &lt;- read_csv2(\"initial_data/climate/cleaned/monthly_anomaly.csv\")\nmonthly_tavg_paths &lt;- list.files(\"initial_data/climate/cleaned/trends/monthly_tavg/\", full.names = T)\nmonthly_tanomaly_paths &lt;- list.files(\"initial_data/climate/cleaned/trends/monthly_t_anomaly/\", full.names = T)\n\nmonthly_tavg_trends &lt;- read_csv(monthly_tavg_paths) |&gt; \n  pivot_wider(id_cols = c(Station, Month), values_from = c(RR, P, b),\n              names_from = Parametr)\n\nmonthly_tanomaly_trends &lt;- read_csv(monthly_tanomaly_paths) |&gt; \n  pivot_wider(id_cols = c(Station, Month), values_from = c(RR, P, b),\n              names_from = Parametr)\n\n#Общая таблица со значениями и характериситками трендов\nfor_text &lt;- monthly_anomaly |&gt; \n  group_by(Station, Month) |&gt; \n  summarise(across(c(Tavg, T_anomaly), list(\n    SE = \\(x) round(std(x), 2), \n    mean = \\(x) round(mean(x), 1))),\n    T_diff = round(max(T_diff), 1)) |&gt; \n  left_join(monthly_tavg_trends, by = c(\"Station\", \"Month\")) |&gt; \n  left_join(monthly_tanomaly_trends, by = c(\"Station\" ,\"Month\"))\n\n# Топ-3 тренда по станциям (средние температуры)\ntop_b_tavg &lt;- for_text |&gt; \n  group_by(Station) |&gt; \n  slice_max(b_tavg, n=3) |&gt; \n  mutate(Tavg_and_SE = str_c(Tavg_mean, Tavg_SE, sep = \"±\")) |&gt; \n  mutate(Station = case_when(\n    Station == \"average_by_all_station\" ~ \"Все станции\",\n    Station == \"bakhta\" ~ \"Бахта\",\n    Station == \"bor\" ~ \"Бор\",\n    Station == \"igarka\" ~ \"Игарка\",\n    Station == \"turukhansk\" ~ \"Туруханск\",\n    Station == \"verkhneimbatsk\" ~ \"Верхнеимбатск\",\n    Station == \"vorogovo\" ~ \"Ворогово\",\n    Station == \"yartsevo\" ~ \"Ярцево\"\n  )) |&gt; \n  select(Станция = Station,\n         Месяц = Month,\n         Ср.температуры=Tavg_and_SE,\n         b=b_tavg,\n         Rsqr = RR_tavg,\n         P = P_tavg,\n         T_diff)\n  \n# Топ-3 тренда по станциям (температурные аномалии)\ntop_b_tanomaly &lt;- for_text |&gt; \n  group_by(Station) |&gt; \n  slice_max(b_t_anomaly, n=3) |&gt; \n  mutate(T_anomaly_and_SE = str_c(T_anomaly_mean, T_anomaly_SE, sep = \"±\")) |&gt; \n  mutate(Station = case_when(\n    Station == \"average_by_all_station\" ~ \"Все станции\",\n    Station == \"bakhta\" ~ \"Бахта\",\n    Station == \"bor\" ~ \"Бор\",\n    Station == \"igarka\" ~ \"Игарка\",\n    Station == \"turukhansk\" ~ \"Туруханск\",\n    Station == \"verkhneimbatsk\" ~ \"Верхнеимбатск\",\n    Station == \"vorogovo\" ~ \"Ворогово\",\n    Station == \"yartsevo\" ~ \"Ярцево\"\n  )) |&gt; \n  select(Станция = Station,\n         Месяц = Month,\n         Аномалии=T_anomaly_and_SE,\n         b=b_t_anomaly,\n         Rsqr = RR_t_anomaly,\n         P = P_t_anomaly)\n\n# write_xlsx(top_b_tanomaly, \"initial_data/climate/cleaned/tables_for_text/top_3_t_anomaly_by_b.xlsx\")\n# write_xlsx(top_b_tavg, \"initial_data/climate/cleaned/tables_for_text/top_3_tavg_by_b.xlsx\")",
    "crumbs": [
      "Климатические изменения",
      "Таблицы для диссертации"
    ]
  },
  {
    "objectID": "numbers&climate_main.html",
    "href": "numbers&climate_main.html",
    "title": "Главная",
    "section": "",
    "text": "Cвязь климатических изменений и типов динамики численности мелких млекопитающих.\nПриведены основные этапы подготовки данных и построения моделей.",
    "crumbs": [
      "Связь климатических изменений и динамики популяций",
      "Главная"
    ]
  },
  {
    "objectID": "1_import-&-cleaning.html#проверка-на-выбросы",
    "href": "1_import-&-cleaning.html#проверка-на-выбросы",
    "title": "Импорт и очистка климатических данных",
    "section": "Проверка на выбросы",
    "text": "Проверка на выбросы\nСреднесуточные температуры: пропусков нет (очистили ранее), но есть проблемы с летними периодами и сентябрем в 1966-1976 годах.\n\n\nПоказать код\nclimate &lt;- climate |&gt;\n  mutate(Date = make_date(Year, Month, Day)) # датафрейм с датами в формате дат,чтобы plot_ly смог построить интерактивный график\n\ninteractive_graph(climate, parametr = 'Tavg', \"Temperature\") # Есть проблемы с летними периодами за 1966-1976\n\n\n\n\n\n\nГрафик атмосферных осадков, видно выбросы\n\n\nПоказать код\ninteractive_graph(climate, parametr = 'Pr', \"Precipitations\") # Есть выбросы\n\n\n\n\n\n\nОчень сильные отклонения заменил осреднениями по соседним значениям\n\n\nПоказать код\nclimate &lt;- climate |&gt; \n  mutate(Pr = case_when(\n    Pr %in% c(204.3, 202) ~ 3,\n    Pr == 813 ~ 2,\n    .default = Pr\n  ))\n\n\nГлубина снежного покрова\n\n\nПоказать код\ninteractive_graph(climate, parametr= 'Sn', \"Snow depth\")\n\n\n\n\n\n\nПропусков в необходимых измерениях больше нет\n\n\nПоказать код\naggr(climate, prop = F, numbers = T) # Пропусков больше нет",
    "crumbs": [
      "Климатические изменения",
      "Импорт и очистка климатических данных"
    ]
  },
  {
    "objectID": "1_import-&-cleaning.html#расчёт-среднемесячных-показателей-п.-бахта",
    "href": "1_import-&-cleaning.html#расчёт-среднемесячных-показателей-п.-бахта",
    "title": "Импорт и очистка климатических данных",
    "section": "Расчёт среднемесячных показателей (п. Бахта)",
    "text": "Расчёт среднемесячных показателей (п. Бахта)\nГрафик исходных данных. С 1976 года есть проблемы с летними месяцами.\n\n\nПоказать код\nBakhta_monthly &lt;- climate |&gt;\n  group_by(Year, Month) |&gt;\n  summarise(across(c(Tavg, Sn), mean),\n            Pr = sum(Pr)) |&gt; # Накопленное количество осадков\n  mutate(across(where(is.character), as.numeric)) |&gt; \n  arrange(Year, Month) |&gt; \n  mutate(Date = make_date(Year, Month))\n\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\n\nПоказать код\ninteractive_graph(Bakhta_monthly, \"Tavg\", \"Temperature\")\n\n\n\n\n\n\nПолучим данные из соседних метеостанций. Среднемесячные температуры в Бору (южнее Бахты)\n\n\nПоказать код\nBor_monthly &lt;- read_delim(\"../initial_data/climate/monthly/Bor_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |&gt; \n  select(-Station) |&gt; \n  mutate_all(as.numeric) |&gt; \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |&gt; \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Bor_monthly, parametr = 'Tavg', \"Temperature in Bor\")\n\n\n\n\n\n\nСреднемесячные температуры в Верхнеимбатске (севернее Бахты)\n\n\nПоказать код\nVerkhneimbatsk_monthly &lt;- read_delim(\"../initial_data/climate/monthly/Verkhneimbatsk_monthly.txt\",\n  delim = \";\", col_types = \"n\",\n  col_names = c(\"Station\", \"Year\", 1:12)) |&gt; \n  select(-Station) |&gt; \n  mutate_all(as.numeric) |&gt; \n  pivot_longer(cols = -c(Year), names_to = \"Month\", values_to = \"Tavg\") |&gt; \n  mutate(Date = make_date(Year, Month))\n\ninteractive_graph(Verkhneimbatsk_monthly, parametr = 'Tavg', \"Temperature in Verkhneimbatsk\")\n\n\n\n\n\n\nЗамена данных с 1966 по 1976 в Бахте осредненными из Бора и Верхнеимбатска\n\n\nПоказать код\n# 1966-1976 Бахта замена на оср Бор - Верхнеимбатск --------\nBor_Verkhn &lt;- Bor_monthly |&gt;\n  left_join(Verkhneimbatsk_monthly, by = c(\"Year\", \"Month\")) |&gt;\n  select(Year, Month, Bor_tavg = Tavg.x, Verkhn_tavg = Tavg.y) |&gt;\n  filter(Year %in% c(1966:1976), Month %in% c(6:9)) |&gt;\n  mutate(across(c(Year, Month), as.integer)) |&gt; \n  group_by(Year, Month) |&gt;\n  summarise(Tavg = mean(Bor_tavg, Verkhn_tavg))\n\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\n\nПоказать код\nBakhta_monthly_new &lt;- Bakhta_monthly |&gt;\n  ungroup() |&gt; \n  mutate(across(c(Year, Month), as.integer)) |&gt; \n  left_join(Bor_Verkhn, by = c(\"Year\", \"Month\")) |&gt;\n  mutate(Tavg = ifelse(is.na(Tavg.y) == F, Tavg.y, Tavg.x)) |&gt;\n  select(Year, Month, Tavg, Sn, Pr, Date)\n\n\n# График среднемесячных температур в Бахте (1966-1976гг 6-8 мес заменены на оср Бор-Верхнеимбатск)\ninteractive_graph(Bakhta_monthly_new, \"Tavg\", \"Temperature in Bakhta\")",
    "crumbs": [
      "Климатические изменения",
      "Импорт и очистка климатических данных"
    ]
  },
  {
    "objectID": "3_bad_snow.html#функция-для-считывания-исходных-файлов",
    "href": "3_bad_snow.html#функция-для-считывания-исходных-файлов",
    "title": "Неблагоприятные снежные условия",
    "section": "Функция для считывания исходных файлов",
    "text": "Функция для считывания исходных файлов\n\n\nПоказать код\n# Functions ---------------------------------------------------------------\nread_files  &lt;- function(x){\n  read_excel(x) |&gt; \n    select(Local_time, Tavg = T, Sn_description = `E'`) |&gt; \n    mutate(Local_time = as_datetime(Local_time, format = \"%d.%m.%Y %R\")) |&gt; \n    mutate(Year = year(Local_time),\n           Month = as.factor(month(Local_time)),\n           Day = mday(Local_time)) |&gt; \n    group_by(Year, Month,  Day) |&gt; \n    summarise(Sn_description = as.factor(str_flatten(Sn_description, \", \", na.rm = T)),\n              cross_zero = case_when(min(Tavg)&lt;0 & max(Tavg)&lt;0 ~\"cold\",\n                                     min(Tavg)&lt;0 & max(Tavg)&gt;0 ~ \"cross\",\n                                     min(Tavg)&gt;0 & max(Tavg)&gt;0 ~ \"warm\"))\n}\n\nmeans_smooth &lt;- function(x, n) {\n  pracma::movavg(x, n=10, type=c(\"s\"))\n}",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#импорт",
    "href": "3_bad_snow.html#импорт",
    "title": "Неблагоприятные снежные условия",
    "section": "Импорт",
    "text": "Импорт",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#расчет-количества-дней-когда-снег-покрывал-менее-половины-поверхности-почвы",
    "href": "3_bad_snow.html#расчет-количества-дней-когда-снег-покрывал-менее-половины-поверхности-почвы",
    "title": "Неблагоприятные снежные условия",
    "section": "",
    "text": "Показать код\n# Functions ---------------------------------------------------------------\nread_files  &lt;- function(x){\n  read_excel(x) |&gt; \n    select(Local_time, Tavg = T, Sn_description = `E'`) |&gt; \n    mutate(Local_time = as_datetime(Local_time, format = \"%d.%m.%Y %R\")) |&gt; \n    mutate(Year = year(Local_time),\n           Month = as.factor(month(Local_time)),\n           Day = mday(Local_time)) |&gt; \n    group_by(Year, Month,  Day) |&gt; \n    summarise(Sn_description = as.factor(str_flatten(Sn_description, \", \", na.rm = T)),\n              cross_zero = case_when(min(Tavg)&lt;0 & max(Tavg)&lt;0 ~\"cold\",\n                                     min(Tavg)&lt;0 & max(Tavg)&gt;0 ~ \"cross\",\n                                     min(Tavg)&gt;0 & max(Tavg)&gt;0 ~ \"warm\"))\n}\n\nmeans_smooth &lt;- function(x, n) {\n  pracma::movavg(x, n=10, type=c(\"s\"))\n}\n\n\n\n\n\n\n\nПоказать код\n# Импорт данных 1961-2004 -------------------------------------------------\nsnow_1961_2004 &lt;- read.csv2(\"../initial_data/climate/1961_2005/23776_snow.csv\", fileEncoding = \"windows-1251\") |&gt;\n  select(\n    Station = Станция,\n    Year = Год,\n    Month = Месяц,\n    Day = День,\n    Sn = Высота_снежного_покрова,\n    Sn_description = Снежный_покров_.степень_покрытия,\n    Q1,\n    Q2,\n    Q3\n  )|&gt; \n  filter(Q1 == 0) |&gt; # по описанию данных 0 - данные о снежном покрове верные\n  filter(Sn_description != 99) |&gt;\n  filter((Year&lt;2005) | (Year == 2005 & Month == 1)) |&gt; \n  mutate(Sn_description = ifelse(Sn_description &lt;= 5,1,0)) # Если снег &lt;50% поверхности почвы, то 1\n\n\nsnow_1961_2004_may &lt;- snow_1961_2004 |&gt; \n  filter(Month == 5)\n\n\ntavg_1961_2004_may &lt;- read_excel(\"../initial_data/climate/1961_2005/23776_TTTR.xlsx\") |&gt; \n  select(Year = год,\n         Month = месяц,\n         Day = день,\n         Tmin = Тмин,\n         Tavg = Тср,\n         Tmax = Тмакс) |&gt; \n  filter(Month == 5,\n         Year != 2005)\n\n\ncross_zero_snow_may_1961_2004 &lt;- tavg_1961_2004_may |&gt; \n  left_join(snow_1961_2004_may, by = c(\"Year\", \"Month\", \"Day\")) |&gt;  \n  mutate(cross_zero = case_when(Tmin&lt;0 & Tmax&gt;0 ~ \"cross\",\n                                Tmin&lt;0 & Tmax&lt;0 ~ \"cold\",\n                                Tmin &gt; 0 & Tmax &gt; 0 ~ \"warm\"\n  )) |&gt; \n  select(Year, Sn_description, cross_zero)\n\n\n\n# Импорт данных 2005-2023 -------------------------------------------------\n\npaths &lt;- list.files(\"../initial_data/climate/2005_2023\", pattern = \"[.]xls$\", full.names = TRUE) # Просканировали все файлы в директории\n\ntotal_2005_2023 &lt;- paths |&gt; \n  map_df(read_files)\n\ns &lt;- levels(as.factor(total_2005_2023$Sn_description))[c(4, 5,6)] # Отбор уровней фактора, когда снег = лед, или снег не покрывает всю поверхность почвы\n\n\ntotal_2005_2023 &lt;- total_2005_2023 |&gt; \n  mutate(Sn_description = ifelse(Sn_description %in% s,1,0))\n\ncross_zero_snow_may_2005_2023 &lt;- total_2005_2023 |&gt; \n  ungroup() |&gt; \n  filter(Month == 5) |&gt; \n  select(-Month, -Day)\n\n\n\n\n# Объединение данных из разных источников ---------------------------------\nsnow_1961_2023 &lt;- snow_1961_2004 |&gt; \n  select(Year, Month, Sn_description) |&gt; \n  rbind(total_2005_2023 |&gt; \n          select(Year, Month, Sn_description))",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#каким-образом-дни-с-неблагоприятным-снежным-покровом-распределены-по-месяцам",
    "href": "3_bad_snow.html#каким-образом-дни-с-неблагоприятным-снежным-покровом-распределены-по-месяцам",
    "title": "Неблагоприятные снежные условия",
    "section": "Каким образом дни с неблагоприятным снежным покровом распределены по месяцам?",
    "text": "Каким образом дни с неблагоприятным снежным покровом распределены по месяцам?\n\n\nПоказать код\n# Распределение плохих снежных дней по месяцам ----------------------------\n\nonly_bad_days &lt;- snow_1961_2023 |&gt; \n  filter(Sn_description == 1) |&gt; \n  filter(Month %in% c(3:5, 9:10 )) |&gt;\n  mutate(Month = factor(Month, levels =c (3:5, 9, 10))) \n\n\nbad_days_monthly &lt;- only_bad_days |&gt; \n  group_by(Year, Month) |&gt; \n  summarise(N = n()) |&gt; \n  mutate(Catch = case_when(\n    Year %in% c(1976:1994, 2008:2023) ~ 1,\n    .default = 0\n  )) |&gt; \n  ggplot(aes(Year, N))+\n  geom_col(aes(fill = as.factor(Catch)))+\n  facet_wrap(~Month)+\n  theme_minimal()+\n  labs(x = \"Год\",\n       y = NULL)+\n  theme(legend.position = \"none\",\n        text = element_text(size = 14),\n        axis.text.x = element_text(angle = 45))\n\n\nbad_days_annualy &lt;- only_bad_days |&gt; \n  group_by(Year) |&gt; \n  summarise(N = n()) |&gt; \n  mutate(Catch = case_when(\n    Year %in% c(1976:1994, 2008:2023) ~ 1,\n    .default = 0\n  )) |&gt; \n  ggplot(aes(Year, N))+\n  geom_col(aes(fill = as.factor(Catch)))+\n  theme_minimal()+\n  labs(x = NULL,\n       y = \"Дней\")+\n  theme(legend.position = \"none\",\n        text = element_text(size = 14),\n        axis.text.x = element_text(angle = 45))\n\ngraph &lt;-  bad_days_annualy / bad_days_monthly +\n  plot_layout(heights = c(2, 2))\n\n\n\nprint(graph)",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#в-когда-были-плохие-условия",
    "href": "3_bad_snow.html#в-когда-были-плохие-условия",
    "title": "Неблагоприятные снежные условия",
    "section": "в % когда были плохие условия",
    "text": "в % когда были плохие условия\n\n\nПоказать код\n ---------------------------------\nonly_bad_days |&gt; \n  group_by(Month) |&gt; \n  summarise(N = sum(Sn_description)) |&gt; \n  mutate(All = sum(N)) |&gt; \n  mutate(Proportion = N/All*100)\n\n\n# A tibble: 1 × 4\n  Month     N   All Proportion\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1    NA  -365  -365        100\n\n\nПоказать код\n# итого с 1961 по 2023\n# 66% таких дней в мае, 14% в апреле, 0.2% в марте (итого 80% весной),\n# 18% в октябре, в сентябре 3%,  итого осенью 21% \n\n# Только в те годы, когда были отловы\n# Апрель 13%, Май 68% (итого весна 81%)\n# Октябрь 18% сентябрь 1% итого осенью 19%\nonly_bad_days |&gt; \n  filter(Year %in% c(1976:1994, 2008:2023)) |&gt; \n  group_by(Month) |&gt; \n  summarise(N = sum(Sn_description)) |&gt; \n  mutate(All = sum(N)) |&gt; \n  mutate(Proportion = N/All*100)\n\n\n# A tibble: 4 × 4\n  Month     N   All Proportion\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1 4        29   223     13.0  \n2 5       153   223     68.6  \n3 9         2   223      0.897\n4 10       39   223     17.5",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#как-факт-плохого-снега-связан-с-переходами-температур-через-0-градусов-в-течение-суток-тест-хи-вадрат",
    "href": "3_bad_snow.html#как-факт-плохого-снега-связан-с-переходами-температур-через-0-градусов-в-течение-суток-тест-хи-вадрат",
    "title": "Неблагоприятные снежные условия",
    "section": "Как факт “плохого” снега связан с переходами температур через 0 градусов в течение суток? (тест хи-вадрат)",
    "text": "Как факт “плохого” снега связан с переходами температур через 0 градусов в течение суток? (тест хи-вадрат)\n\n\nПоказать код\n# связь плохого снега с переходами температур через 0 в течение суток --------\n\npreference_table &lt;- rbind(cross_zero_snow_may_1961_2004, cross_zero_snow_may_2005_2023) |&gt; \n  mutate(cross_zero = case_when(cross_zero == \"cross\"~ 1,\n                                .default = 0)) |&gt; \n  group_by(Sn_description, cross_zero) |&gt; \n  summarise(N = n()) |&gt; \n  filter(is.na(Sn_description) == F) |&gt; \n  pivot_wider(id_cols = Sn_description, names_from = cross_zero, values_from = N) |&gt; \n  ungroup() |&gt; \n  select(-Sn_description) |&gt; \n  as.matrix()\n\nrownames(preference_table) &lt;- c(\"good_snow\", \"bad_snow\")\ncolnames(preference_table) &lt;- c(\"doesnt_cross_zero\", \"cross_zero\")\n\n# Проведение критерия хи-квадрат\nchi_square_result &lt;- chisq.test(preference_table)\n\n# Вывод результатов теста\nprint(chi_square_result)\n\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  preference_table\nX-squared = 14.71, df = 1, p-value = 0.0001254",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#график-количество-дней-когда-температуры-пересекали-0-градусов-в-течение-суток",
    "href": "3_bad_snow.html#график-количество-дней-когда-температуры-пересекали-0-градусов-в-течение-суток",
    "title": "Неблагоприятные снежные условия",
    "section": "График: количество дней, когда температуры пересекали 0 градусов в течение суток",
    "text": "График: количество дней, когда температуры пересекали 0 градусов в течение суток\n\n\nПоказать код\n# Тренд кол-ва дней, когда темп перечекали 0 в теч суток ------------------\nwith_trends &lt;- rbind(cross_zero_snow_may_1961_2004, cross_zero_snow_may_2005_2023) |&gt;\n  filter(is.na(cross_zero)==F) |&gt; \n  group_by(Year, cross_zero) |&gt; \n  summarise(N = n()) |&gt; \n  mutate(N = case_when(is.na(N) ~ 0,\n                       .default = N)) |&gt; \n  group_by(cross_zero) |&gt; \n  mutate(roll_mean = means_smooth(N, 10))\n\n\n\ncross_zero_daily_graph &lt;- with_trends |&gt; \n  mutate(cross_zero = case_when(cross_zero == \"cross\" ~ \"Тмин &lt;0 и Тмакс &gt;0\",\n                                cross_zero == \"warm\" ~ \"Тмин и Тмакс &gt;0\",\n                                cross_zero == \"cold\" ~ \"Тмин и Тмакс &lt;0\"))|&gt;\n  ggplot(aes(Year, roll_mean))+\n  geom_line(linewidth = 2, col = \"blue\")+\n  geom_col(aes(y = N), alpha = 0.3)+\n  facet_wrap(~cross_zero)+\n  stat_poly_line(color = \"red\", alpha = 0.5, na.rm = T)+\n  stat_poly_eq(use_label(\"eq\"), na.rm = T)+\n  stat_poly_eq(use_label(c(\"R2\",\"p\")), label.y = 0.9, na.rm = T)+\n  theme_minimal()+\n  labs(x = \"Год\",\n       y = \"Количество дней\") +\n  theme(text = element_text(size = 18))\n\n\n\n\nПоказать код\nprint(cross_zero_daily_graph)",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "3_bad_snow.html#сопоставление-данных-из-разных-источников",
    "href": "3_bad_snow.html#сопоставление-данных-из-разных-источников",
    "title": "Неблагоприятные снежные условия",
    "section": "Сопоставление данных из разных источников",
    "text": "Сопоставление данных из разных источников\nС 2005 года данные получены с сайта rp5.ru. Степень покрытия почвы снегом имеет несколько текстовых градаций. До 2005 года этот параметр отражается в балльной шкале от 1 (10% поверхности покрыто снегом, до 10). Сопоставимы ли эти данные?\nПостроим модель градиентного бустинга\nИмпорт необходимых модулей\n\n\nПоказать код\nimport pandas as pd\nfrom catboost import CatBoostClassifier\nfrom catboost import Pool\nimport shap\n\nimport matplotlib\nfrom matplotlib.ticker import NullLocator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score\n\nfrom catboost.utils import get_roc_curve\nimport sklearn\nfrom sklearn import metrics\n\n\n\nimport matplotlib.pyplot as plt\n\ndata = pd.read_csv(\"../scripts/climate/catboost/snow__quality_with_other_parametrs.csv\", sep = ';', decimal = ',')\n\n\nРазбить данные на тренировочную, валидационную и тестовую части\n\n\nПоказать код\ndata = data[(data['Month']&gt;=9) | (data['Month']&lt;=5)]\n\nnew_data = data[((data['Year']==2005) & (data['Month']&gt;1)) | (data['Year']&gt;2005)]\nold_data = data[(data['Year']&lt;2005)]\n\nX_new = new_data.drop(['Sn_quality', 'Date', 'Year', 'Day', 'Month'], axis=1)\ny_new = new_data['Sn_quality']\n\n# Тренировочная и валидационная выборки на данных, полученных с rp5\nX_train, X_val, y_train, y_val = train_test_split(X_new, y_new, test_size=0.2, random_state=42)\n\n# Тестовая часть выборки - данные из Обнинска\nX_test = old_data.drop(['Sn_quality', 'Date', 'Year', 'Day', \"Month\"], axis=1)\ny_test = old_data['Sn_quality']\n\n\nНепосредственно сама модель\n\n\nПоказать код\nmodel_with_early_stop=CatBoostClassifier(\n    eval_metric='AUC',\n    iterations=200,\n    random_seed=63,\n    learning_rate=0.3,\n    early_stopping_rounds=20)\nmodel_with_early_stop.fit(\n    X_train,y_train,\n    eval_set=(X_val, y_val),\n    verbose=False,\n    plot=True\n)\n\n\nMetricVisualizer(layout=Layout(align_self='stretch', height='500px'))\n&lt;catboost.core.CatBoostClassifier object at 0x000001FFF2A8E920&gt;\n\n\nОценка модели на валидационной и тестовой выборках\n\nplt.figure(figsize=(16, 8))\nlw=2\nplt.subplot(1, 2, 1)\neval_pool = Pool(X_val, y_val)\ncurve = get_roc_curve(model_with_early_stop, eval_pool)\n(fpr, tpr, thresholds)=curve\nroc_auc=sklearn.metrics.auc(fpr, tpr)\n\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc, alpha=0.5)\n\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--', alpha=0.5)\n\nplt.xlim([0.0, 1.0])\n\n(0.0, 1.0)\n\nplt.ylim([0.0, 1.05])\n\n(0.0, 1.05)\n\nplt.xticks(fontsize=22)\n\n(array([0. , 0.2, 0.4, 0.6, 0.8, 1. ]), [Text(0.0, 0, '0.0'), Text(0.2, 0, '0.2'), Text(0.4, 0, '0.4'), Text(0.6000000000000001, 0, '0.6'), Text(0.8, 0, '0.8'), Text(1.0, 0, '1.0')])\n\nplt.yticks(fontsize=22)\n\n(array([0. , 0.2, 0.4, 0.6, 0.8, 1. , 1.2]), [Text(0, 0.0, '0.0'), Text(0, 0.2, '0.2'), Text(0, 0.4, '0.4'), Text(0, 0.6000000000000001, '0.6'), Text(0, 0.8, '0.8'), Text(0, 1.0, '1.0'), Text(0, 1.2000000000000002, '1.2')])\n\nplt.grid(True)\nplt.ylabel('True Positive Rate', fontsize=25)\nplt.title('A', fontsize=20)\nplt.legend(loc=\"lower right\", fontsize=16)\n\n# оценка на тестовой  выборке\nplt.subplot(1, 2, 2)\neval_pool = Pool(X_test, y_test )\ncurve = get_roc_curve(model_with_early_stop, eval_pool)\n(fpr, tpr, thresholds)=curve\nroc_auc=sklearn.metrics.auc(fpr, tpr)\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc, alpha=0.5)\n\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--', alpha=0.5)\n\nplt.xlim([0.0, 1.0])\n\n(0.0, 1.0)\n\nplt.ylim([0.0, 1.05])\n\n(0.0, 1.05)\n\nplt.xticks(fontsize=22)\n\n(array([0. , 0.2, 0.4, 0.6, 0.8, 1. ]), [Text(0.0, 0, '0.0'), Text(0.2, 0, '0.2'), Text(0.4, 0, '0.4'), Text(0.6000000000000001, 0, '0.6'), Text(0.8, 0, '0.8'), Text(1.0, 0, '1.0')])\n\nplt.yticks(fontsize=22)\n\n(array([0. , 0.2, 0.4, 0.6, 0.8, 1. , 1.2]), [Text(0, 0.0, '0.0'), Text(0, 0.2, '0.2'), Text(0, 0.4, '0.4'), Text(0, 0.6000000000000001, '0.6'), Text(0, 0.8, '0.8'), Text(0, 1.0, '1.0'), Text(0, 1.2000000000000002, '1.2')])\n\nplt.grid(True)\nplt.title('Б', fontsize=20)\n\nplt.legend(loc=\"lower right\", fontsize=16)\ntxt=\"False Positive Rate\"\nplt.figtext(0.5, 0.01, txt, wrap=True, horizontalalignment='center', fontsize=25)\nplt.savefig('total.png', format='png', dpi = 200)\n\nplt.show()\n\n\n\n\n\n\n\n\nПолучили хорошее качество как на валидационной (А), так и не тестовой (Б) выборке",
    "crumbs": [
      "Климатические изменения",
      "Неблагоприятные снежные условия"
    ]
  },
  {
    "objectID": "4_Tavg_Sn_Pr_anomaly.html#библиотеки",
    "href": "4_Tavg_Sn_Pr_anomaly.html#библиотеки",
    "title": "Расчет аномалий метеопараметров",
    "section": "Библиотеки",
    "text": "Библиотеки\n\nlibrary(tidyverse)\nlibrary(pracma) #для подсчета скользящей средней",
    "crumbs": [
      "Климатические изменения",
      "Расчет аномалий метеопараметров"
    ]
  },
  {
    "objectID": "4_Tavg_Sn_Pr_anomaly.html#импорт-данных",
    "href": "4_Tavg_Sn_Pr_anomaly.html#импорт-данных",
    "title": "Расчет аномалий метеопараметров",
    "section": "Импорт данных",
    "text": "Импорт данных\n\nBakhta_monthly &lt;- read_csv2(\"../initial_data/climate/cleaned/Bakhta_monthly_1966-1976_replaced_by_average_Bor_Verkhn.csv\") |&gt; \n  select(-Date) |&gt; \n  mutate(Station = \"bakhta\") |&gt; \n  select(Station, Year, Month, Tavg, Pr, Sn)\n\nsix_station_monthly &lt;- read_csv2(\"../initial_data/climate/cleaned/all_station_tavg_monthly.csv\") |&gt; \n  filter(Station != \"bakhta\") |&gt; \n  mutate(Pr = NA, Sn = NA) |&gt; \n  select(Station, Year, Month, Tavg, Pr, Sn)\n\ntavg_by_seven_station &lt;- read_csv2(\"../initial_data/climate/cleaned/average_temp_by_7_station.csv\") |&gt; \n  mutate(Station = \"average_by_all_station\", Pr=NA, Sn=NA) |&gt; \n  select(Station, Year, Month, Tavg, Pr, Sn)\n\nall_station &lt;- rbind(Bakhta_monthly, six_station_monthly, tavg_by_seven_station)",
    "crumbs": [
      "Климатические изменения",
      "Расчет аномалий метеопараметров"
    ]
  },
  {
    "objectID": "4_Tavg_Sn_Pr_anomaly.html#осреднение",
    "href": "4_Tavg_Sn_Pr_anomaly.html#осреднение",
    "title": "Расчет аномалий метеопараметров",
    "section": "Осреднение",
    "text": "Осреднение\n\nannualy_T_avg_Pr &lt;- all_station |&gt; \n  rename(T_=Tavg) |&gt; # не менять, иначе не будут считаться SE\n  group_by(Station, Year) |&gt; \n  summarise(Tavg = mean(T_),\n            Tavg_SE = std(T_),\n            Pr = sum(Pr)) # SE для Pr не считаем, так как там не среднее, а сумма\n\n#Для снежного покрова сделаем отдельный расчет среднегодового, не учитывая летние месяцы\nannualy_Sn &lt;- all_station |&gt; \n  rename(Sn_=Sn) |&gt; # не менять, иначе не будут считаться SE\n  filter(Month %in% c(1:5,9:12)) |&gt; \n  group_by(Station, Year) |&gt; \n  summarise(Sn = mean(Sn_),\n            Sn_SE = std(Sn_))\n\nannualy &lt;- annualy_T_avg_Pr |&gt; \n  left_join(annualy_Sn, by = c(\"Station\", \"Year\"))\n\nrm(annualy_Sn, annualy_T_avg_Pr, six_station_monthly, Bakhta_monthly, tavg_by_seven_station)\n\n# Расчет базовых (опорных) значений ---------------------------------------\nbase_annualy &lt;- annualy |&gt; \n  filter(Year %in% c(1961:1990)) |&gt; \n  group_by(Station) |&gt; \n  summarise(across(c(Tavg, Sn, Pr), list(\n    base = mean,\n    base_SE = std\n  )))\n\nbase_monthly &lt;- all_station |&gt; \n  filter(Year %in% c(1961:1990)) |&gt; \n  group_by(Station, Month) |&gt; \n  summarise(across(c(Tavg, Sn, Pr), list(\n    base = mean,\n    base_SE = std\n  )))\n\n# Средние значения за последнее десятилетие -------------------------------\n\nlast_decade_annualy &lt;- annualy |&gt; \n  filter(Year %in% c(2013:2022)) |&gt;  #2023 год не берем, так как нет полных данных\n  group_by(Station) |&gt; \n  summarise(across(c(Tavg, Sn, Pr), list(\n    last_decade = mean,\n    last_decade_SE = std\n  )))\n\nlast_decade_monthly &lt;- all_station |&gt; \n  filter(Year %in% c(2013:2022)) |&gt; \n  group_by(Station, Month) |&gt;\n  summarise(across(c(Tavg, Sn, Pr), list(\n    last_decade = mean,\n    last_decade_SE = std\n  )))\n\n# Расчет аномалий, скользящего среднего, линейного тренда с 1976 года и разницы между базовой и последним десятилетием --------\nannualy_anomaly &lt;- annualy |&gt; \n  left_join(base_annualy, by = \"Station\") |&gt; \n  group_by(Station) |&gt; \n  mutate(T_anomaly = Tavg-Tavg_base,\n         Sn_anomaly = Sn-Sn_base,\n         Pr_anomaly = Pr-Pr_base) |&gt; \n  left_join(last_decade_annualy, by = \"Station\") |&gt; \n  mutate(T_diff = Tavg_last_decade-Tavg_base,\n         Sn_diff = Sn_last_decade-Sn_base,\n         Pr_diff = Pr_last_decade-Pr_base) |&gt; \n  mutate(across(c(T_anomaly, Pr_anomaly, Sn_anomaly, Tavg, Pr, Sn), list(\n    roll_mean = means_smooth\n  ))) |&gt;\n  mutate(across(contains(\"roll_mean\"),\n                list(from_1976 = \\(x) c(rep(NA, 15), x[16:length(x)])\n                )))\n\nmonthly_anomaly &lt;- all_station |&gt; \n  left_join(base_monthly, by = c(\"Station\", \"Month\")) |&gt; \n  group_by(Station, Month) |&gt; \n  mutate(T_anomaly=Tavg-Tavg_base,\n         Sn_anomaly=Sn-Sn_base,\n         Pr_anomaly=Pr-Pr_base) |&gt; \n  left_join(last_decade_monthly, by=c(\"Station\",\"Month\"))|&gt; \n  mutate(T_diff = Tavg_last_decade-Tavg_base,\n         Sn_diff = Sn_last_decade-Sn_base,\n         Pr_diff = Pr_last_decade-Pr_base) |&gt; \n  mutate(across(c(T_anomaly, Pr_anomaly, Sn_anomaly, Tavg, Pr, Sn), list(\n    roll_mean = means_smooth\n  ))) |&gt;\n  mutate(across(contains(\"roll_mean\"),\n                list(from_1976 = \\(x) c(rep(NA, 15), x[16:length(x)])\n                )))\n\n# write.csv2(annualy_anomaly, \"initial_data/climate/cleaned/annualy_anomaly.csv\", row.names = FALSE)\n# write.csv2(monthly_anomaly, \"initial_data/climate/cleaned/monthly_anomaly.csv\", row.names = FALSE)",
    "crumbs": [
      "Климатические изменения",
      "Расчет аномалий метеопараметров"
    ]
  },
  {
    "objectID": "5_crossing_zero.html#пользовательские-функции",
    "href": "5_crossing_zero.html#пользовательские-функции",
    "title": "Сезоны по переходу температур через 0",
    "section": "Пользовательские функции",
    "text": "Пользовательские функции\n\nmeans_smooth &lt;- function(x, n) {\n  pracma::movavg(x, n=10, type=c(\"s\")) #для подсчета скользящего среднего\n}\nstd &lt;- function(x){ sd(x)/sqrt(length(x)) } # Стандартная ошибка - стандартное отклонение/квадратный корень из числа наблюдений\n\nseason_by_crossing_stop_level &lt;- function(input_data, parametr, stop_level){\n  \n  first_half_of_year &lt;- input_data |&gt;\n    filter(Month %in% c(1:6)) #только  первая половина года\n  last_half_of_year &lt;- input_data |&gt;\n    filter(Month %in% c(7:12)) #только вторая половина года\n  \n  check_more_then_stop_level &lt;- function(df){\n    df |&gt; \n      group_by(Year) |&gt;\n      mutate(\n        more_then_zero = {{parametr}} &gt; {{stop_level}}, # логический столбец, параметр больше 0? (TRUE | FALSE)\n        chng1 = cumsum(more_then_zero != lag(more_then_zero, def = first(more_then_zero)))\n      )\n    # lag(more_then_zero, def = first(more_then_zero))\n    # lag сдвигает вектор на +1 (в начале вектора будет добавлено значение)\n    # по умолчанию это значение NA, но def переопределяет его на первое в исходном столбце more_then_zero\n    # cumsum - кумулятивная сумма\n    # в итоговом столбце будет цифра, обозначающая, какой это переход через 0 (в любую сторону) в текущем году\n    # в столбце chng1 - порядковый номер перехода температур через 0 в конкретном году\n   }\n  \n  beginning_year &lt;- first_half_of_year |&gt;\n    check_more_then_stop_level() |&gt; \n    group_by(Year) |&gt; \n    mutate(Season = ifelse(chng1==0, \"Winter_first\", \n                           ifelse(max(chng1)==1 & chng1 !=0, \"Summer\", \n                                  ifelse(chng1 %in% c(1:(max(chng1)-1)), \"Spring\",\n                                         \"Summer\")\n                           )))\n  end_year &lt;- last_half_of_year |&gt; \n    check_more_then_stop_level() |&gt; \n    group_by(Year) |&gt; \n    mutate(Season = ifelse(chng1==0, \"Summer\", \n                           ifelse(max(chng1)==1 & chng1 !=0, \"Winter_last\", \n                                  ifelse(chng1 %in% c(1:(max(chng1)-1)), \"Autumn\",\n                                         \"Winter_last\")\n                           )))\n  \n  all_year &lt;- rbind(beginning_year, end_year) |&gt; \n    arrange(Year, Month, Day)\n  \n  \n  #Аггрегации по сезонам, кроме зимы\n  aggregate_by_season &lt;- all_year |&gt; \n    filter(Season!=\"Winter_last\", Season!=\"Winter_first\") |&gt; \n    group_by(Year, Season) |&gt; \n    rename(T_=Tavg) |&gt; # не менять, иначе не будут считаться SE\n    summarise(Tavg = mean(T_),\n              Tavg_SE = std(T_),\n              Pr_sum = sum(Pr),\n              Sn_avg = mean(Sn),\n              Sn_avg_SE = std(Sn),\n              Duration = n())\n  \n  winter_end &lt;- all_year |&gt; \n    filter(Season == \"Winter_last\") |&gt; \n    group_by(Year) |&gt;\n    rename(T_=Tavg) |&gt; # не менять, иначе не будут считаться SE\n    summarise(Tavg = mean(T_),\n              Tavg_SE = std(T_),\n              Pr_sum = sum(Pr),\n              Sn_avg = mean(Sn),\n              Sn_avg_SE = std(Sn),\n              Duration=n()) |&gt; \n    mutate(Year = Year+1) #Сдвигаем год на 1 вперед, так как рассчитывать среднее значение будем уже с будущим годом\n  \n  winter_start &lt;- all_year |&gt; \n    filter(Season == \"Winter_first\") |&gt; \n    group_by(Year) |&gt; \n    rename(T_=Tavg) |&gt; # не менять, иначе не будут считаться SE\n    summarise(Tavg = mean(T_),\n              Tavg_SE = std(T_),\n              Pr_sum = sum(Pr),\n              Sn_avg = mean(Sn),\n              Sn_avg_SE = std(Sn),\n              Duration=n())\n  \n  all_winter &lt;- winter_start |&gt; \n    full_join(winter_end, by=\"Year\") |&gt; \n    mutate(Tavg = (Tavg.x+Tavg.y)/2,\n           Tavg_SE = (Tavg_SE.x+Tavg_SE.y)/2,\n           Pr_sum = Pr_sum.x+Pr_sum.y,\n           Sn_avg = (Sn_avg.x+Sn_avg.y)/2,\n           Sn_avg_SE = (Sn_avg_SE.x+Sn_avg_SE.y)/2,\n           Duration = Duration.x+Duration.y) |&gt; \n    select(Year, Tavg, Tavg_SE, Pr_sum, Sn_avg,Sn_avg_SE, Duration) |&gt; \n    mutate(Season=\"Winter\")\n  \n  \n  # Найдем количество дней от начала года, когда начался тот или иной сезон\n  Spring_start &lt;- all_year |&gt;\n    group_by(Year) |&gt;\n    filter(Season %in% c(\"Winter_first\")) |&gt; \n    summarise(start = n()+1) |&gt; \n    mutate(Season = \"Spring\")\n  \n  Summer_start &lt;- all_year |&gt;\n    group_by(Year) |&gt;\n    filter(Season %in% c(\"Winter_first\", \"Spring\")) |&gt; \n    summarise(start = n()+1) |&gt; \n    mutate(Season = \"Summer\")\n  \n  Autumn_start &lt;- all_year |&gt;\n    group_by(Year) |&gt; \n    filter(Season %in% c(\"Winter_first\", \"Spring\", \"Summer\")) |&gt; \n    summarise(start = n()+1) |&gt; \n    mutate(Season = \"Autumn\")\n  \n  Winter_start &lt;- all_year |&gt;\n    group_by(Year) |&gt; \n    filter(Season %in% c(\"Winter_first\", \"Spring\", \"Summer\", \"Autumn\")) |&gt; \n    summarise(start = n()+1) |&gt; \n    mutate(Season = \"Winter\")\n  \n  start_of_season &lt;- rbind(Spring_start, Summer_start, Autumn_start, Winter_start)\n\n  result &lt;- rbind(aggregate_by_season, all_winter) |&gt; \n    arrange(Year, Season) |&gt; \n    left_join(start_of_season, by = c(\"Year\", \"Season\"))\n  return(list(\"season\" = result, \n              \"crossing_zero\" = all_year))\n} #выделить сезоны по переходу parametr через stop_level\n\n# Циклы оттаивания-замерзания - melt_freeze\n# на вход принимает результат выполнения функции season_by_crossing_stop_level\n# crossing zero\n# на выходе датафрейм с количеством переходов температуры через 0\n# выводит количество для каждого года суммарно\nmelt_freeze &lt;- function(df){\n  melt_freeze_jan_may &lt;- df |&gt; \n    filter(Month %in% c(1:5)) |&gt; \n    group_by(Year) |&gt; \n    summarise(Melt_freeze = max(chng1))\n  melt_freeze_sep_dec &lt;- df |&gt; \n    filter(Month %in% c(9:12)) |&gt; \n    mutate(Year = Year+1) |&gt;  # сдвигаем на +1 год, так как суммировать будем уже со следующим годом\n    group_by(Year) |&gt; \n    summarise(Melt_freeze = max(chng1))\n  \n  melt_freeze_all_winter &lt;- melt_freeze_jan_may |&gt; \n    full_join(melt_freeze_sep_dec, by = \"Year\") |&gt; \n    mutate(Melt_freeze.y = ifelse(is.na(Melt_freeze.y), 0 , Melt_freeze.y)) |&gt; \n    mutate(Melt_freeze = Melt_freeze.x + Melt_freeze.y) |&gt; \n    select(Year, Melt_freeze)\n  \n  return(melt_freeze_all_winter)\n  \n  \n}",
    "crumbs": [
      "Климатические изменения",
      "Сезоны по переходу температур через 0"
    ]
  },
  {
    "objectID": "5_crossing_zero.html#запуск-расчетов",
    "href": "5_crossing_zero.html#запуск-расчетов",
    "title": "Сезоны по переходу температур через 0",
    "section": "Запуск расчетов",
    "text": "Запуск расчетов\n\nseason_by_snow &lt;- season_by_crossing_stop_level(Bakhta_daily, Sn, 0)$season\n \nseason_by_temperature &lt;- season_by_crossing_stop_level(Bakhta_daily, Tavg, 0)$season |&gt; \n  group_by(Season) |&gt;\n  filter(Year &gt; 1977) |&gt; \n  mutate(across(c(Tavg, Pr_sum, Sn_avg, Duration, start), list(\n    roll_mean = means_smooth\n  )))\n\n# write.csv2(season_by_snow, \"initial_data/climate/cleaned/season_by_snow.csv\", row.names = FALSE)\n# write.csv2(season_by_temperature, \"initial_data/climate/cleaned/season_by_temperature.csv\",row.names = FALSE)\n\n# Ежегодное количество циклов \"оттаивание-замерзание\" \nmelt_freeze_all_winter &lt;- melt_freeze(season_by_crossing_stop_level(Bakhta_daily, Tavg, 0)$crossing_zero)\n# write.csv2(melt_freeze_all_winter, \"initial_data/climate/cleaned/melt_freeze_all_winter.csv\", row.names = FALSE)\n\n# Количество циклов \"замерзание-оттаивание\" по месяцам\nmelt_freeze_by_month &lt;- season_by_crossing_stop_level(Bakhta_daily, Tavg, 0)$crossing_zero |&gt; \n  group_by(Year, Month) |&gt; \n  summarise(MAX = max(chng1)) |&gt; \n  ungroup() |&gt; \n  mutate(Last_max = lag(MAX),\n         differ = MAX - Last_max) |&gt; \n  filter(Month %in% c(1:5, 9:12)) |&gt; \n  filter(MAX != 0) |&gt; \n  filter(Month != 12) |&gt; \n  select(Year, Month, Melt_freeze = differ)\n  \n# write.csv2(melt_freeze_by_month, \"initial_data/climate/cleaned/melt_freeze_by_month.csv\", row.names = FALSE)",
    "crumbs": [
      "Климатические изменения",
      "Сезоны по переходу температур через 0"
    ]
  },
  {
    "objectID": "5_crossing_zero.html#библиотеки",
    "href": "5_crossing_zero.html#библиотеки",
    "title": "Сезоны по переходу температур через 0",
    "section": "Библиотеки",
    "text": "Библиотеки\n\nlibrary(tidyverse)\nBakhta_daily &lt;- read_csv2(\"../initial_data/climate/cleaned/Bakhta_daily_attention1966-1976(problems_with_summer).csv\") |&gt;\n  filter(Year &gt; 1976) |&gt; #Потому что до 1977 года проблемы с летними месяцами, =&gt; нельзя выделить сезоны точно\n  select(-Date)",
    "crumbs": [
      "Климатические изменения",
      "Сезоны по переходу температур через 0"
    ]
  },
  {
    "objectID": "6_graphs.html#библиотеки",
    "href": "6_graphs.html#библиотеки",
    "title": "Графики (исходный код)",
    "section": "Библиотеки",
    "text": "Библиотеки\n\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(ggpmisc) # для добавления линии регрессии на график",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#импорт",
    "href": "6_graphs.html#импорт",
    "title": "Графики (исходный код)",
    "section": "Импорт",
    "text": "Импорт\n\nseven_station_monthly &lt;- read_csv2(\"../initial_data/climate/cleaned/monthly_anomaly.csv\")\nseven_station_annualy &lt;- read_csv2(\"../initial_data/climate/cleaned/annualy_anomaly.csv\")\n\nstation_name &lt;- levels(as.factor(seven_station_annualy$Station))\n\n#Сезоны, выделенные по переходу температур/снега через 0\nseason_by_temperature &lt;- read_csv2(\"../initial_data/climate/cleaned/season_by_temperature.csv\")\nseason_by_snow &lt;- read_csv2(\"../initial_data/climate/cleaned/season_by_snow.csv\")\n\n#Оттаивание-замерзание\nmelt_freeze_all_winter &lt;- read_csv2(\"../initial_data/climate/cleaned/melt_freeze_by_month.csv\")\n\n#Бахта, количество дней с \"плохим\" снежным покровом при отрицательных температурах\nbakhta_bad_snow_with_negative_temp &lt;- read_csv2(\"../initial_data/climate/cleaned/bakhta_bad_snow_with_negative_temp.csv\")\n\n# Количество дней с \"плохим\" снежным покровом по всем станциям\nbad_snow &lt;- read_csv2(\"../initial_data/climate/cleaned/all_station_bad_snow.csv\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#шаблоны-графиков",
    "href": "6_graphs.html#шаблоны-графиков",
    "title": "Графики (исходный код)",
    "section": "Шаблоны графиков",
    "text": "Шаблоны графиков\ntemplate &lt;- function(df, x, red_line, gray_line, blue_line,\n                     y_labs, col_or_line, color_of_col){\n  geometry &lt;- function(col_or_line, color_of_col){\n    if (col_or_line == \"col\"){\n      list(geom_col(aes(y={{ gray_line }}), alpha=0.2, fill = color_of_col))\n    }\n    else {\n      list(geom_line(aes({{ x }}, {{ gray_line }}), alpha = 0.2))\n    }\n  }\n  \n  ggplot(df, aes(x = {{ x }}, y = {{ red_line }}))+\n    geometry(col_or_line, color_of_col)+\n    geom_line(aes({{ x }}, {{ blue_line }}), color = \"#4682B4\", linewidth = 1.1)+\n    stat_poly_line(color = \"red\", alpha = 0.5, na.rm = T)+\n    stat_poly_eq(use_label(\"eq\"), na.rm = T)+\n    stat_poly_eq(use_label(c(\"R2\",\"p\")), label.y = 0.9, na.rm = T)+\n    theme_minimal()+\n    labs(x = \"Год\",\n         y = y_labs)+\n    scale_y_continuous(labels = scales::label_number(accuracy = 1))\n}\n\nann_monthly_graph &lt;- function(df_annualy, df_monthly, station, x,\n                    red_line, gray_line, blue_line, y_labs, prefix,\n                    col_or_line, color_of_col = \"black\"){\n  \n  annualy &lt;- df_annualy |&gt; \n    filter(Station == station) |&gt; \n    filter(Year != 2023) |&gt;\n    template(x = {{x}},\n             red_line = {{ red_line }},\n             gray_line = {{ gray_line }},\n             blue_line  = {{ blue_line }},\n             y_labs = y_labs,\n             col_or_line = col_or_line,\n             color_of_col = color_of_col)+\n    labs(x = NULL,\n         y = NULL)\n  \n  monthly &lt;- df_monthly |&gt; \n    filter(Station == station) |&gt;\n    filter(Year != 2023) |&gt;\n    template(x = {{x}},\n             red_line = {{ red_line }},\n             gray_line = {{ gray_line }},\n             blue_line  = {{ blue_line }},\n             y_labs = y_labs,\n             col_or_line = col_or_line,\n             color_of_col = color_of_col)+\n    facet_wrap(.~Month, scales = \"free\")+\n    theme(axis.text.x = element_text(angle = 60))\n  \n  total_graph &lt;- annualy / monthly +\n    plot_layout(heights = c(1, 3))\n  \n  ggsave(total_graph, file= paste(\"images/climate/\", prefix, \"/\", station, \"_\",  prefix, \"_graph.png\", sep=\"\"),\n         device = png,\n         width = 2480, height = 3100, units = \"px\")\n  \n  print(paste(\"График для станции \", station, \" сохранен\"))\n  \n  #Выгрузка параметров линейного тренда\n  monthly_ &lt;- ggplot_build(monthly)\n  monthly_parametr &lt;- tibble(Month = levels(monthly_$data[[1]]$PANEL),\n                             RR = monthly_$data[[4]]$rr.label, \n                             EQ = monthly_$data[[4]]$eq.label,\n                             P = round(monthly_$data[[4]]$p.value, 5),\n                             Station = station) |&gt;\n    separate_wider_delim(RR, delim='\"', names=c('x','r'), too_many = \"drop\" ) |&gt; \n    mutate(b = str_sub(EQ, start = -20, end = -12)) |&gt; \n    mutate(b = str_remove_all(b, \"[ +]\")) |&gt; \n    mutate(b = str_remove(b, '^\\\\.')) |&gt; \n    mutate(Parametr = prefix) |&gt;\n    select(Station, Parametr, Month, RR = r, P, b) |&gt; \n    mutate_all(type.convert, as.is = T)\n  \n  write.csv(monthly_parametr, file = paste(\"initial_data/climate/cleaned/trends/monthly_\",\n                                           prefix, \"/\",\n                                           station,\n                                           \"_trends.csv\", sep = \"\"), row.names = F)\n  print(paste(\"параметры тренда по станции\", station,  \"сохранены в файл\"))\n}",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#средние-температуры",
    "href": "6_graphs.html#средние-температуры",
    "title": "Графики (исходный код)",
    "section": "Средние температуры",
    "text": "Средние температуры\n\n\nstation_name |&gt; map(\\(x) ann_monthly_graph(seven_station_annualy,\n                                           seven_station_monthly,\n                                           station = x,\n                                           x=Year,\n                                           red_line=Tavg_roll_mean_from_1976,\n                                           gray_line = Tavg,\n                                           blue_line = Tavg_roll_mean,\n                                           y_labs = \"Температура приземного воздуха, [\\u00B0C]\",\n                                           prefix = \"tavg\",\n                                           col_or_line = \"line\"), .progress=T)",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#среднесезонные-температуры-сезоны-выделены-по-температурам",
    "href": "6_graphs.html#среднесезонные-температуры-сезоны-выделены-по-температурам",
    "title": "Графики (исходный код)",
    "section": "Среднесезонные температуры (сезоны выделены по температурам)",
    "text": "Среднесезонные температуры (сезоны выделены по температурам)\n\ntavg_by_season &lt;- season_by_temperature|&gt;\n  filter(Year != 2023) |&gt;\n  mutate(Season = factor(Season, labels = c(\"Осень\", \"Весна\", \"Лето\", \"Зима\"))) |&gt; \n  template(x=Year,\n           red_line=Tavg_roll_mean,\n           gray_line = Tavg,\n           blue_line = Tavg_roll_mean,\n           y_labs = \"Температура приземного воздуха, [\\u00B0C]\",\n           col_or_line = \"line\")+\n  facet_wrap(.~Season, scales = \"free_y\")\n\n# ggsave(tavg_by_season, file= \"images/climate/season/tavg_by_season(by_temperature).png\", device = png,\n#        width = 2000, height = 1500, units = \"px\", bg = \"white\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#температурные-аномалии",
    "href": "6_graphs.html#температурные-аномалии",
    "title": "Графики (исходный код)",
    "section": "Температурные аномалии",
    "text": "Температурные аномалии\n\nstation_name |&gt; map(\\(x) ann_monthly_graph(seven_station_annualy,\n                                 seven_station_monthly,\n                                 station = x,\n                                 x=Year,\n                                 red_line=T_anomaly_roll_mean_from_1976,\n                                 gray_line = T_anomaly,\n                                 blue_line = T_anomaly_roll_mean,\n                                 y_labs = \"Отклонения от среднего за 1961-1990 гг., [\\u00B0C]\",\n                                 prefix = \"t_anomaly\",\n                                 col_or_line = \"line\"), .progress=T)",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#суммы-осадков",
    "href": "6_graphs.html#суммы-осадков",
    "title": "Графики (исходный код)",
    "section": "Суммы осадков",
    "text": "Суммы осадков\n\nann_monthly_graph(seven_station_annualy,\n                                 seven_station_monthly,\n                                 station = \"bakhta\",\n                                 x=Year,\n                                 red_line=Pr_roll_mean_from_1976,\n                                 gray_line = Pr,\n                                 blue_line = Pr_roll_mean,\n                                 y_labs = \"Сумма осадков, мм\",\n                                 prefix = \"pr\",\n                                 col_or_line = \"col\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#суммы-осадков-по-сезонам",
    "href": "6_graphs.html#суммы-осадков-по-сезонам",
    "title": "Графики (исходный код)",
    "section": "Суммы осадков по сезонам",
    "text": "Суммы осадков по сезонам\npr_by_season &lt;- season_by_temperature|&gt;\n  filter(Year != 2023) |&gt;\n  mutate(Season = factor(Season, labels = c(\"Осень\", \"Весна\",\"Лето\", \"Зима\"))) |&gt; \n  template(x=Year,\n           red_line=Pr_sum_roll_mean,\n           gray_line = Pr_sum,\n           blue_line = Pr_sum_roll_mean,\n           y_labs = \"Сумма осадков, мм\",\n           col_or_line = \"col\",\n           color_of_col = \"black\")+\n  facet_wrap(.~Season, scales = \"free_y\")\n\n# ggsave(pr_by_season, file= \"images/climate/season/pr_by_season(by_temperature).png\", device = png,\n#        width = 2000, height = 1600, units = \"px\", bg = \"white\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#аномалии-осадков",
    "href": "6_graphs.html#аномалии-осадков",
    "title": "Графики (исходный код)",
    "section": "Аномалии осадков",
    "text": "Аномалии осадков\n\nann_monthly_graph(seven_station_annualy,\n                  seven_station_monthly,\n                  station = \"bakhta\",\n                  x=Year,\n                  red_line=Pr_anomaly_roll_mean_from_1976,\n                  gray_line = Pr_anomaly,\n                  blue_line = Pr_anomaly_roll_mean,\n                  y_labs = \"Отклонения от среднего за 1961-1990 гг., мм\",\n                  prefix = \"pr_anomaly\",\n                  col_or_line = \"col\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#глубина-снежного-покрова",
    "href": "6_graphs.html#глубина-снежного-покрова",
    "title": "Графики (исходный код)",
    "section": "Глубина снежного покрова",
    "text": "Глубина снежного покрова\n\nann_monthly_graph(seven_station_annualy,\n                  seven_station_monthly |&gt;  filter(!(Month %in% (6:8))),\n                  station = \"bakhta\",\n                  x=Year,\n                  red_line=Sn_roll_mean_from_1976,\n                  gray_line = Sn,\n                  blue_line = Sn_roll_mean,\n                  y_labs = \"Глубина снежного покрова, см\",\n                  prefix = \"sn\",\n                  col_or_line = \"col\",\n                  color_of_col = \"#4682B4\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#глубина-снежного-покрова-по-сезонам",
    "href": "6_graphs.html#глубина-снежного-покрова-по-сезонам",
    "title": "Графики (исходный код)",
    "section": "Глубина снежного покрова по сезонам",
    "text": "Глубина снежного покрова по сезонам\nsn_by_season &lt;- season_by_temperature|&gt;\n  filter(Year != 2023, Season != \"Summer\") |&gt;\n  mutate(Season = factor(Season, labels = c(\"Осень\", \"Весна\", \"Зима\"))) |&gt; \n  template(x=Year,\n           red_line=Sn_avg_roll_mean,\n           gray_line = Sn_avg,\n           blue_line = Sn_avg_roll_mean,\n           y_labs = \"Глубина снежного покрова, см\",\n           col_or_line = \"col\",\n           color_of_col = \"#4682B4\")+\n  facet_wrap(.~Season, scales = \"free_y\")\n\n# ggsave(sn_by_season, file= \"images/climate/season/sn_by_season(by_temperature).png\", device = png,\n#        width = 2000, height = 1000, units = \"px\", bg = \"white\")\\",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#аномалии-глубины-снежного-покрова",
    "href": "6_graphs.html#аномалии-глубины-снежного-покрова",
    "title": "Графики (исходный код)",
    "section": "Аномалии глубины снежного покрова",
    "text": "Аномалии глубины снежного покрова\n\nann_monthly_graph(seven_station_annualy,\n                  seven_station_monthly |&gt;  filter(!(Month %in% (6:8))),\n                  station = \"bakhta\",\n                  x=Year,\n                  red_line=Sn_anomaly_roll_mean_from_1976,\n                  gray_line = Sn_anomaly,\n                  blue_line = Sn_anomaly_roll_mean,\n                  y_labs = \"Глубина снежного покрова, см\",\n                  prefix = \"sn_anomaly\",\n                  col_or_line = \"col\",\n                  color_of_col = \"#4682B4\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#продолжительность-сезонов-выделены-по-температурам",
    "href": "6_graphs.html#продолжительность-сезонов-выделены-по-температурам",
    "title": "Графики (исходный код)",
    "section": "Продолжительность сезонов (выделены по температурам)",
    "text": "Продолжительность сезонов (выделены по температурам)\n\nduration_of_season_by_temp &lt;- season_by_temperature|&gt;\n  filter(Year != 2023) |&gt;\n  mutate(Season = factor(Season, labels = c(\"Осень\", \"Весна\", \"Лето\", \"Зима\"))) |&gt; \n  ggplot(aes(Year, Duration_roll_mean))+\n  geom_col(aes(y = Duration), fill = \"lightblue\", alpha = 0.5)+\n  geom_line(aes(y = Duration_roll_mean), col = \"red\", linewidth = 1.2)+\n  facet_wrap(.~Season, scales = \"free_y\")+\n  theme_minimal()+\n  labs(x = \"Год\",\n       y = \"Продолжительность, дней\")\n\n# ggsave(duration_of_season_by_temp, file= \"images/climate/season/duration_of_season_by_temp.png\", device = png,\n#        width = 2000, height = 1500, units = \"px\", bg = \"white\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#оттаивание-замерзание",
    "href": "6_graphs.html#оттаивание-замерзание",
    "title": "Графики (исходный код)",
    "section": "Оттаивание-замерзание",
    "text": "Оттаивание-замерзание\n\nmelt_freeze_by_month_graph &lt;- ggplot(melt_freeze_all_winter, aes(Year, Melt_freeze))+\n  geom_col()+\n  facet_wrap(.~Month)+\n  theme_minimal()+\n  labs(x=\"Год\",\n       y = 'Количество переходов \"замерзание-оттаивание\"')\n\n# ggsave(melt_freeze_by_month_graph, file= \"images/climate/melt_freeze_by_month_graph.png\", device = png,\n#        width = 2481, height = 1500, units = \"px\", bg = \"white\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#количество-дней-с-плохим-снегом-по-всем-станциям-с-2005-года",
    "href": "6_graphs.html#количество-дней-с-плохим-снегом-по-всем-станциям-с-2005-года",
    "title": "Графики (исходный код)",
    "section": "Количество дней с “плохим” снегом по всем станциям (с 2005 года)",
    "text": "Количество дней с “плохим” снегом по всем станциям (с 2005 года)\n\nseven_station_graph &lt;- bad_snow |&gt; \n  mutate(Station = factor(Station, levels = c(\"Игарка\", \"Туруханск\", \"Верхнеимбатск\",\n                                              \"Бахта\", \"Бор\", \"Ворогово\", \"Ярцево\"))) |&gt; \n  ggplot(aes(Year, count))+\n  geom_col(fill=\"lightblue\")+\n  facet_wrap(.~Station, ncol = 1)+\n  theme_bw()+\n  labs(x = \"Год\",\n       y = \"Количество дней, когда снег покрывал  &lt;50% поверхности почвы\")+\n  coord_cartesian(xlim = c(2005,2023 ))+\n  theme_minimal()\n\n# ggsave(seven_station_graph, filename=\"images/climate/bad_snow_by_station.png\",\n#        width = 1000, height = 2500, units = \"px\", bg = \"white\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "6_graphs.html#количество-дней-с-плохим-снегом-в-бахте",
    "href": "6_graphs.html#количество-дней-с-плохим-снегом-в-бахте",
    "title": "Графики (исходный код)",
    "section": "Количество дней с “плохим” снегом в Бахте",
    "text": "Количество дней с “плохим” снегом в Бахте\n\nbakhta_bad_snow &lt;- bad_snow |&gt; \n  filter(Station == \"Бахта\") |&gt; \n  mutate(Neg_temp = \"При любой температуре\") |&gt; \n  arrange(Year)\n\nbakhta_bad_snow_with_negative_temp &lt;- bakhta_bad_snow_with_negative_temp |&gt; \n  mutate(Neg_temp = \"При температуре &lt;0\\u00B0C\") |&gt; \n  arrange(Year)\n\nbakhta_bad_snow &lt;- rbind(bakhta_bad_snow, bakhta_bad_snow_with_negative_temp) |&gt; \n  select(-Station) |&gt; \n  pivot_longer(-c(Year, Neg_temp), values_to = \"N\", names_to = \"Season\") |&gt; \n  mutate(Season = case_when(\n    Season == \"count\" ~ \"Вся зима\",\n    Season == \"First_half\" ~ \"Сент-дек\",\n    Season == \"Last_half\" ~ \"Янв-май\"\n  )) |&gt; \n  mutate(Catch = case_when(\n    Year %in% c(1976:1994, 2008:2023) ~ 1,\n    .default = 0\n  ))\n\nbad_snow_days_graph &lt;- ggplot(bakhta_bad_snow, aes(Year, N))+\n  geom_col(aes(fill= as.factor(Catch)))+\n  facet_grid(Season~Neg_temp, scales = \"free_x\")+\n  theme_minimal()+\n  labs(x = \"Год\",\n       y = \"Дней\")+\n  theme(legend.position = \"none\")\n\n# ggsave(device = png, filename = \"images/climate/bad_snow_days_graph.png\",\n#   plot = bad_snow_days_graph, bg = \"white\", width = 1500, height = 1600, units = \"px\")",
    "crumbs": [
      "Климатические изменения",
      "Графики (исходный код)"
    ]
  },
  {
    "objectID": "population_dynamic_main.html#необходимые-библиотеки",
    "href": "population_dynamic_main.html#необходимые-библиотеки",
    "title": "Динамика популяций",
    "section": "Необходимые библиотеки",
    "text": "Необходимые библиотеки\n\nlibrary(WaveletComp)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(patchwork)",
    "crumbs": [
      "Динамика популяций"
    ]
  },
  {
    "objectID": "population_dynamic_main.html#импорт",
    "href": "population_dynamic_main.html#импорт",
    "title": "Динамика популяций",
    "section": "Импорт",
    "text": "Импорт\n# XX век\nLB_XX &lt;- as.data.frame(read_excel(\"initial_data/numbers/XX/LB_XX.xlsx\"))\nRB_XX &lt;- as.data.frame(read_excel(\"initial_data/numbers/XX/RB_XX.xlsx\"))\n\n# XXI век\nLB_XXI &lt;- as.data.frame(read_excel(\"initial_data/numbers/XXI/XXI_LB.xlsx\"))\nRB_XXI &lt;- as.data.frame(read_excel(\"initial_data/numbers/XXI/XXI_RB.xlsx\"))\n\n# Исходные данные - 4 таблицы (численность мелких млекопитающих на левом и правом берегу Енисея в XX и XXI веке)\n# Таблицы следующей структуры: первая колонка - дата(год), последующие - численность конкретного вида\nShrew_name &lt;- c(\n  \"S._araneus\", \"S._caecutiens\",\n  \"S._isodon\", \"S._minutus\", \"S._roboratus\", \"S._tundrensis\"\n) # Species of shrews\nRodent_name &lt;- c(\n  \"M._oeconomus\", \"C._rufocanus\",\n  \"C._rutilus\", \"M._agrestis\",\n  \"M._schisticolor\", \"S._betulina\"\n) # Species of rodent\nCom &lt;- c(\"Community\")",
    "crumbs": [
      "Динамика популяций"
    ]
  },
  {
    "objectID": "population_dynamic_main.html#результаты",
    "href": "population_dynamic_main.html#результаты",
    "title": "Динамика популяций",
    "section": "Результаты",
    "text": "Результаты\n\n# Расчет кросс-вейвлета численности землероек на обоих берегах\nshrew_XX &lt;- wavelet_coherency(LB_XX, RB_XX, Shrew_name)\nshrew_XXI &lt;- wavelet_coherency(LB_XXI, RB_XXI, Shrew_name)\n\n# Графики численности и осредненного кросс-вейвлета (землеройки)\nplot_shrew &lt;- num_both_bank(LB_XX, RB_XX, LB_XXI, RB_XXI, Shrew_name)\npl1 &lt;- plot_average_wavelet_coherence(shrew_XX, element_text(size = 14, colour = \"black\"))\npl2 &lt;- plot_average_wavelet_coherence(shrew_XXI, element_blank())\n\np &lt;- pl1 + plot_shrew + pl2 +\n  plot_layout(widths = c(1, 3.5, 1)) +\n  plot_annotation(tag_levels = \"A\") &\n  theme(plot.background = element_rect(fill = \"transparent\", color = NA))\n\nggsave(\n  device = png, filename = \"images/wavelet/Shrew.png\",\n  plot = p, bg = \"transparent\", width = 2481, height = 3000, units = \"px\"\n)\n\n\n# Расчет кросс-вейвлета численности грызунов на обоих берегах\nrodent_XX &lt;- wavelet_coherency(LB_XX, RB_XX, Rodent_name)\nrodent_XXI &lt;- wavelet_coherency(LB_XXI, RB_XXI, Rodent_name)\n# Графики численности и осредненного кросс-вейвлета (грызуны)\nplot_rodent &lt;- num_both_bank(LB_XX, RB_XX, LB_XXI, RB_XXI, Rodent_name)\npl3 &lt;- plot_average_wavelet_coherence(rodent_XX, element_text(size = 14, colour = \"black\"))\npl4 &lt;- plot_average_wavelet_coherence(rodent_XXI, element_blank())\n\np_rodent &lt;- pl3 + plot_rodent + pl4 +\n  plot_layout(widths = c(1, 5, 1)) +\n  plot_annotation(tag_levels = \"A\") &\n  theme(plot.background = element_rect(fill = \"transparent\", color = NA))\nggsave(\n  device = png, filename = \"images/wavelet/Rodent.png\",\n  plot = p_rodent, bg = \"transparent\", width = 2481, height = 3000, units = \"px\"\n)\n\n# Расчет кросс-вейвлета численности всего сообщества на обоих берегах\ncommunity_XX &lt;- wavelet_coherency(LB_XX, RB_XX, Com)\ncommunity_XXI &lt;- wavelet_coherency(LB_XXI, RB_XXI, Com)\n\n# Графики численности и осредненного кросс-вейвлета (все сообщество)\nplot_community &lt;- num_both_bank(LB_XX, RB_XX, LB_XXI, RB_XXI, Com)\npl5 &lt;- plot_average_wavelet_coherence(community_XX, element_blank())\npl6 &lt;- plot_average_wavelet_coherence(community_XXI, element_blank())\n\np_comm &lt;- pl5 + plot_community + pl6 +\n  plot_layout(widths = c(1, 4, 1)) +\n  plot_annotation(tag_levels = \"A\") &\n  theme(plot.background = element_rect(fill = \"transparent\", color = NA))\n\nggsave(\n  device = png, filename = \"images/wavelet/Community.png\",\n  plot = p_comm, bg = \"transparent\", width = 2481, height = 1150, units = \"px\"\n)\n\n\n# Спектрограммы сохранены как картинки и помещены на фон линейных графиков в Adobe Photoshop\n\n# Расчет структуры доминирования видов и построение графиков\n\nb &lt;- dominant(LB_XX, RB_XX, LB_XXI, RB_XXI)\npl &lt;- ggplot(b, aes(date, Spec, fill = Dom)) +\n  geom_tile() +\n  facet_grid(Bank ~ Period, scales = \"free_x\") +\n  scale_fill_gradientn(\n    colours = c(\"LightCyan\", \"Pink\", \"Red\"),\n    breaks = c(0.2, 0.4, 0.6),\n    na.value = \"white\"\n  ) +\n  ylab(\"\") +\n  xlab(\"\") +\n  labs(fill = \"Propotion\") +\n  scale_x_continuous(breaks = c(1976, 1980, 1985, 1990, 1994, 2008, 2013, 2017, 2023)) +\n  theme(\n    text = element_text(family = \"sans\", size = 14, colour = \"black\"),\n    axis.text.x = element_text(angle = 90, vjust = .5),\n    legend.background = element_blank(),\n    panel.background = element_rect(fill = \"transparent\"),\n    strip.background = element_rect(fill = \"transparent\")\n  )\n\nggsave(device = png, filename = \"images/wavelet/dominant.png\",\n  plot = pl, bg = \"transparent\", width = 2481, height = 1900, units = \"px\")",
    "crumbs": [
      "Динамика популяций"
    ]
  },
  {
    "objectID": "3_1_data_preparing.html",
    "href": "3_1_data_preparing.html",
    "title": "Подготовка данных",
    "section": "",
    "text": "#+eval=FALSE\nlibrary(tidyverse)\n# Import ------------------------------------------------------------------\ntype_of_dynamic &lt;- read_csv2(\"initial_data/numbers/type_of_dynamic.csv\")\n\n\n# Import climatic variables --------------------------------------------------\nbad_snow &lt;- read_csv2(\"initial_data/climate/cleaned/all_station_bad_snow.csv\") |&gt; \n  filter(Station == \"Бахта\") |&gt; \n  select(Year, count)\n\naverage_parametr &lt;- read_csv2(\"initial_data/climate/cleaned/monthly_anomaly.csv\") |&gt; \n  filter(Station == \"bakhta\") |&gt; \n  filter(Month %in% c(10,11,4,5)) |&gt; \n  select(Year, Month, Tavg, Sn) |&gt; \n  pivot_wider(id_cols = Year, values_from = c(Tavg, Sn), names_from = Month) |&gt; \n  mutate(across(ends_with(c(\"10\", \"11\")), ~lag(.x))) #Месяцы 10,11 сместили на +1 (так как сопоставляем с данными по численности со следующим годом)\nmelt_freeze &lt;- read_csv2(\"initial_data/climate/cleaned/melt_freeze_all_winter.csv\")\n\nseason_by_temperature &lt;- read_csv2(\"initial_data/climate/cleaned/season_by_temperature.csv\") |&gt; \n  select(Year, Season, Dur_by_temp = Duration) |&gt; \n  filter(Season %in% c(\"Spring\", \"Autumn\", \"Winter\")) |&gt; \n  pivot_wider(id_cols = Year, names_from = Season, values_from = Dur_by_temp) |&gt; \n  mutate(Autumn = lag(Autumn)) |&gt; #Потому что осень влияет на данные след. года\n  mutate(across(everything(), \\(x) case_when(is.na(x) ~ 0, .default = x))) |&gt;  # NA означает 0 (значит переходы были резкими, а не размазанными)\n  select(-Winter)\n\nclimatic_parametr &lt;- bad_snow |&gt; \n  full_join(average_parametr, by = \"Year\") |&gt; \n  full_join(melt_freeze, by = \"Year\") |&gt; \n  full_join(season_by_temperature, by = \"Year\") |&gt; \n  arrange(Year) |&gt; \n  mutate(count = case_when(is.na(count)~0, .default = count))\n\nwrite_csv2(climatic_parametr, \"initial_data/numbers+climate/climate_for_model.csv\")\nrm(bad_snow, average_parametr, melt_freeze, season_by_temperature)\n\n\n# Климат + типы динамики --------------------------------------------------\ntype_of_dynamic_and_climate &lt;- type_of_dynamic |&gt; \n  left_join(climatic_parametr, by = \"Year\") |&gt; \n  filter(is.na(Spring) == F)\n\nall_years &lt;- type_of_dynamic_and_climate |&gt; \n  select(-c(Type_dominant_neg_surv, Type_subdominant_neg_surv)) |&gt; \n  pivot_longer(cols = c(Type_subdominant_all_years, Type_dominant_all_years),\n               names_to = \"dom_subdom\", values_to = \"Type\") |&gt; \n  select(-Year)\n\n\nwith_neg_survival &lt;- type_of_dynamic_and_climate |&gt; \n  select(-c(Type_dominant_all_years, Type_subdominant_all_years)) |&gt; \n  pivot_longer(cols = c(Type_subdominant_neg_surv, Type_dominant_neg_surv),\n               names_to = \"dom_subdom\", values_to = \"Type\") |&gt; \n  select(-Year) |&gt; \n  filter(is.na(Type) == F)",
    "crumbs": [
      "Связь климатических изменений и динамики популяций",
      "Подготовка данных"
    ]
  },
  {
    "objectID": "3_2_logistic_regression.html",
    "href": "3_2_logistic_regression.html",
    "title": "Модель логистической регрессии",
    "section": "",
    "text": "#+eval=FALSE\nlibrary(tidyverse)\nlibrary(MuMIn)\n# If your outcome is binary (zeros and ones), proportions of \"successes\" and \"failures\"\n# (values between 0 and 1), or their counts, you can use Binomial distribution,\n# i.e. the logistic regression model.\n# If there is more then two categories,\n# you would use multinomial distribution in multinomial regression.\n# https://stats.stackexchange.com/questions/190763/how-to-decide-which-glm-family-to-use\n\n# Import ------------------------------------------------------------------\ntype_of_dynamic_all_year&lt;- read_csv2(\"initial_data/numbers+climate/type_of_dynamic_all_years.csv\") |&gt; \n  rename(Spec = dom_subdom)\n\ntype_of_dynamic_with_neg_surv &lt;- read_csv2(\"initial_data/numbers+climate/type_of_dynamic_with_neg_survival.csv\")|&gt; \n  rename(Spec = dom_subdom)\n\n# Functions ----------------------------------------------------------------\nlog_reg_for_each_spec &lt;- function(df, spec_name){\n  one_spec &lt;- df |&gt; \n    filter(Spec == spec_name) |&gt; \n    select(-Spec)\n  \n  model_type &lt;- glm(Type~.,family = \"binomial\", one_spec)\n  \n  options(na.action=\"na.fail\")\n  result &lt;- dredge(model_type)\n  n_models &lt;- result |&gt; \n    filter(delta&lt;2) |&gt; \n    nrow()\n  if (n_models&gt;1){\n    est &lt;- model.avg(result, subset = delta&lt;2)\n    \n    avg_result &lt;- summary(est)$coefmat.subset |&gt; \n      as_tibble(rownames = \"features\") |&gt; \n      cbind(confint(est)) |&gt; \n      mutate(Spec = spec_name) |&gt; \n      rename(P_val = `Pr(&gt;|z|)`) |&gt; \n      select(-`z value`) |&gt; \n      mutate(N_models = n_models)\n  }\n  if (n_models==1){\n    a &lt;- summary(model_type)\n    avg_result &lt;- a$coefficients |&gt; \n      as_tibble(rownames = \"features\") |&gt; \n      cbind(confint(model_type)) |&gt; \n      mutate(Spec = spec_name) |&gt; \n      rename(P_val = `Pr(&gt;|z|)`) |&gt; \n      select(-`z value`) |&gt; \n      mutate(N_models = n_models)\n  }\n  return(avg_result)\n}\n\n# тип динамики сообщества ~ климатические факторы -------------------------------------------------------\ncyclic_spec &lt;- c(\"Community\", \"S._araneus\", \"S._caecutiens\", \"S._isodon\", \"S._tundrensis\", \"S._minutus\",\n                 \"C._rufocanus\", \"C._rutilus\", \"M._oeconomus\", \"M._agrestis\")\nresult &lt;- cyclic_spec |&gt; \n  map_dfr(\\(x) log_reg_for_each_spec(type_of_dynamic, x)) |&gt; \n  select(Spec, N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |&gt; \n  mutate(across(where(is.numeric), round, 4))\n\nwrite_csv2(result, \"initial_data/numbers+climate/log_reg/type_of_dynamic_for_each_spec/log_reg_average_models.csv\")\n\nresult_significant &lt;- result |&gt; \n  filter(P_val &lt;0.05)\n\nwrite_csv2(result_significant, \"initial_data/numbers+climate/log_reg/type_of_dynamic_for_each_spec/log_reg_significant.csv\")\n\n\n\n# тип динамики от климата только для доминантов и субдоминантов в любые годы-----------\ncomm_uncomm &lt;- c(\"Type_dominant_all_years\", \"Type_subdominant_all_years\")\n\n\nresult &lt;- comm_uncomm |&gt; \n  map_dfr(\\(x) log_reg_for_each_spec(type_of_dynamic_all_year, x)) |&gt; \n  select(Spec, N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |&gt; \n  mutate(across(where(is.numeric), round, 4)) |&gt; \n  filter(P_val&lt;0.05)\n\n\n# Когда численность в июне&lt;августа  -------------------------\n\ngroup &lt;- c(\"Type_dominant_neg_surv\", \"Type_subdominant_neg_surv\")\nwith_neg_surv &lt;- group |&gt; \n  map_dfr(\\(x) log_reg_for_each_spec(type_of_dynamic_with_neg_surv, x)) |&gt; \n  select(Spec, N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |&gt; \n  mutate(across(where(is.numeric), round, 4))\n\n\nwith_neg_surv_for_common_spec &lt;- common_spec_with_neg_survival |&gt; \n  mutate(Spec = \"common\") |&gt; \n  log_reg_for_each_spec(\"common\") |&gt; \n  select(N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |&gt; \n  mutate(across(where(is.numeric), round, 4)) |&gt; \n  filter(P_val &lt;0.05)\n\nwith_neg_surv_for_uncommon_spec &lt;- uncommon_spec_with_neg_survival |&gt; \n  mutate(Spec = \"uncommon\") |&gt; \n  log_reg_for_each_spec(\"uncommon\") |&gt; \n  select(N_models, features, Estimate, `Std. Error`, P_val, `2.5 %`, `97.5 %`) |&gt; \n  mutate(across(where(is.numeric), round, 4)) |&gt; \n  filter(P_val &lt;0.05)",
    "crumbs": [
      "Связь климатических изменений и динамики популяций",
      "Модель логистической регрессии"
    ]
  },
  {
    "objectID": "3_3_compare_conditions.html",
    "href": "3_3_compare_conditions.html",
    "title": "Сравнение метеоусловий при циклических и нециклических колебаниях",
    "section": "",
    "text": "library(tidyverse)\n\ndata &lt;- read_csv2(\"initial_data/numbers+climate/climate_and_different_type_of_dynamic.csv\") |&gt; \n  filter(Spec == \"Community\") |&gt; \n  select(-Spec) |&gt; \n  pivot_longer(cols = -c(Type, Year), names_to = \"Parametr\", values_to = \"values\") |&gt; \n  mutate(Type = case_when(Type == 0 ~ \"non_cyclic\",\n                          Type == 1 & Year &gt; 2000 ~ \"cyclic_XXI\",\n                          .default = \"cyclic_XX\")) |&gt; \n  select(-Year) |&gt; \n  group_by(Type, Parametr) |&gt; \n  summarise(values = list(values)) |&gt; \n  spread(Type, values)\n\n\n\ncompare_cyclic &lt;- data |&gt; \n  group_by(Parametr) |&gt; \n  mutate(p_value = round(wilcox.test(unlist(cyclic_XX), unlist(cyclic_XXI))$p.value, 3)) |&gt; \n  mutate(Pval_adj = p.adjust(p_value, \"BY\")) |&gt; \n  filter(Pval_adj&lt;0.05)\n\n\ncompare_cyclic_XX_and_non_cyclic &lt;- data |&gt; \n  group_by(Parametr) |&gt; \n  mutate(p_value = round(wilcox.test(unlist(cyclic_XX), unlist(non_cyclic))$p.value, 3)) |&gt; \n  mutate(Pval_adj = p.adjust(p_value, \"BY\")) |&gt; \n  filter(Pval_adj&lt;0.05)\n\ncompare_cyclic_XXI_and_non_cyclic &lt;- data |&gt; \n  group_by(Parametr) |&gt; \n  mutate(p_value = round(wilcox.test(unlist(cyclic_XXI), unlist(non_cyclic))$p.value, 3)) |&gt; \n  mutate(Pval_adj = p.adjust(p_value, \"BY\")) |&gt; \n  filter(Pval_adj&lt;0.05)",
    "crumbs": [
      "Связь климатических изменений и динамики популяций",
      "Сравнение метеоусловий при циклических и нециклических колебаниях"
    ]
  },
  {
    "objectID": "3_3_compare_conditions.html#модель-градиентного-бустинга",
    "href": "3_3_compare_conditions.html#модель-градиентного-бустинга",
    "title": "Сравнение метеоусловий при циклических и нециклических колебаниях",
    "section": "Модель градиентного бустинга",
    "text": "Модель градиентного бустинга\nИмпорт необходимы библиотек\nimport pandas as pd\nfrom catboost import CatBoostClassifier\nfeat_import_total = []\nfrom catboost import Pool\nimport shap\nimport matplotlib.pyplot as pl\nimport matplotlib\nfrom matplotlib.ticker import NullLocator\nНепосредственно модель\nX = data.drop(['Period'], axis=1)\ny = data['Period']\n\nmodel = CatBoostClassifier(loss_function='CrossEntropy', depth=3, learning_rate = 0.02, iterations=300, \n        random_seed=18, \n        od_type='Iter',\n        od_wait=20,\n        bootstrap_type='Bernoulli'\n    )\n\nmodel.fit(\n        X, y,\n        verbose=False,  \n        plot=False\n    )\nprint(model.best_score_)\n    \npool1 = Pool(X, y)\nshap_values_short=model.get_feature_importance(pool1, fstr_type='ShapValues')\n    \n\nexplainer_short = shap.TreeExplainer(model)\nshap_values_short=explainer_short.shap_values(Pool(X, y))\nГрафик индексов Шэпли\nshap.summary_plot(shap_values_short, X, show=False, color_bar = False, plot_type = 'violin',\n                      color_bar_label=None,\n                      max_display=3,\n                      plot_size=[5,3])\npl.xlabel(\"Коэффициент Шэпли\")\npl.savefig('cyclic_XX_XXI_compare.jpg', format='jpg', dpi=500, bbox_inches='tight')",
    "crumbs": [
      "Связь климатических изменений и динамики популяций",
      "Сравнение метеоусловий при циклических и нециклических колебаниях"
    ]
  }
]